/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

fun main() {

    println("=== Etapa 1: Funciones Básicas ===")
    // TODO: Implementar función calcularPromedio
    val promedio1 = calcularPromedio(7.5, 8.0)
    println("El promedio es: $promedio1")

    // TODO: Implementar función esAprobado
    val nota = 7.0
    val aprobado = esAprobado(nota)
    println("¿Está aprobado? $aprobado")

    println("\n=== Etapa 2: Funciones con Múltiples Parámetros ===")
    // TODO: Implementar función calcularPromedioTresNotas
    val promedioTresNotas = calcularPromedioTresNotas(7.0, 8.0, 9.0)
    println("El promedio de las tres notas es: $promedioTresNotas")

    // TODO: Implementar función obtenerEstadoAlumno
    val estado = obtenerEstadoAlumno("Juan", "Pérez", 7.5)
    println(estado)





    println("\n=== Etapa 3: Funciones con Listas ===")
    // TODO: Implementar función calcularPromedioCurso
    val notas = listOf(7.0, 8.0, 6.5, 9.0, 7.5)
    val promedioCurso = calcularPromedioCurso(notas)
    println("El promedio del curso es: $promedioCurso")
 
    // TODO: Implementar función obtenerAlumnosAprobados
    val nombres = listOf("Ana", "Juan", "María", "Pedro", "Lucía")
    val notasAlumnos = listOf(7.0, 5.0, 8.0, 6.0, 9.0)
    val aprobados = obtenerAlumnosAprobados(nombres, notasAlumnos)
    println("Alumnos aprobados: $aprobados")







    println("\n=== Etapa 4: Funciones Avanzadas ===")
    // TODO: Implementar función generarBoletin
    val materias = listOf("Matemática", "Lengua", "Historia")
    val notasMaterias = listOf(8.0, 7.5, 9.0)
    val boletin = generarBoletin("Juan Pérez", materias, notasMaterias)
    println(boletin)





    // TODO: Implementar funciones de análisis de rendimiento
    println("Estadísticas del curso:")
    println("Promedio: ${calcularPromedioCurso(notas)}")
    println("Nota más alta: ${obtenerNotaMasAlta(notas)}")
    println("Nota más baja: ${obtenerNotaMasBaja(notas)}")
    println("Cantidad de aprobados: ${contarAprobados(notas)}")








}

// TODO: Implementar las siguientes funciones:

// Etapa 1
fun calcularPromedio(nota1: Double, nota2: Double): Double {
    // Implementar aquí
    return (nota1 + nota2) / 2
}

fun esAprobado(nota: Double): Boolean {

    return nota >= 6.0
}
 

// Etapa 2
fun calcularPromedioTresNotas(nota1: Double, nota2: Double, nota3: Double): Double {

    return (nota1 + nota2 + nota3) / 3
}

fun obtenerEstadoAlumno(nombre: String, apellido: String, nota: Double): String{

    val estado = if (nota >= 6.0) "está aprobado" else "está desaprobado"
    return "El alumno $nombre $apellido $estado" 
}

// Etapa 3
fun calcularPromedioCurso(notas: List<Double>): Double {

    val cantNotas = notas.size
    val sumNotas = notas.sum()
    return sumNotas/cantNotas
}


fun obtenerAlumnosAprobados(nombres: List<String>, notas: List<Double>): List<String> {
    // Implementar aquí, lo de mutable me lo dio claude... 
    val resultado = mutableListOf<String>()
    var i = 0
    while (i < nombres.size) {
        if (notas[i] >= 6.0) {
            // añade a la lista. me lo dio claude... 
            resultado.add(nombres[i])
        }
        i = i + 1
    }
    return resultado
}








// Etapa 4 CON CLAUDE
fun generarBoletin(nombre: String, materias: List<String>, notas: List<Double>): String {
    // Implementar aquí
    var resultado = "Boletín de Calificaciones\n"
    resultado += "Estudiante: $nombre\n"
    resultado += "--------------------------------\n"
    
    // Validar que las listas tengan el mismo tamaño
    if (materias.size != notas.size) {
        return "Error: La cantidad de materias no coincide con la cantidad de notas"
    }
    
    // Calcular el promedio de todas las notas
    var sumaNotas = 0.0
    
    // Recorrer las listas de materias y notas juntas
    for (i in materias.indices) {
        val materia = materias[i]
        val nota = notas[i]
        
        // Agregar cada materia con su nota al boletín
        resultado += "${materia}: $nota\n"
        
        // Sumar la nota al total
        sumaNotas += nota
    }
}

fun obtenerNotaMasAlta(notas: List<Double>): Double {

    var maxNota = notas[0]
    for (nota in notas) {
        if (nota > maxNota) {
            maxNota = nota
        }
    }
    return maxNota}


fun obtenerNotaMasBaja(notas: List<Double>): Double {

    var minNota = notas[0]
    for (nota in notas) {
        if (nota < minNota) {
            minNota = nota
        }
    }
    return minNota
}

fun contarAprobados(notas: List<Double>): Int {
    var contador = 0
    for (nota in notas) {
        if (nota >= 6.0) {
            contador++
        }
    }
    return contador
}
